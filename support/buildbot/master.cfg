# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.f
c = BuildmasterConfig = {}


####### code

import re
import os.path
import urllib

from buildbot.process.properties import WithProperties
from buildbot.process.properties import Interpolate
from buildbot.process import properties
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source import svn
from buildbot.steps.source import git
from twisted.internet import defer
from buildbot.process import buildstep
from buildbot.steps.source.base import Source
from buildbot.interfaces import BuildSlaveTooOldError
from buildbot.config import ConfigErrors
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.status.mail import MailNotifier
from zope.interface import implements
from buildbot.interfaces import IEmailLookup
from twisted.python import log as twlog
from buildbot.status.results import EXCEPTION
from buildbot.status.results import FAILURE
from buildbot.status.results import Results
from buildbot.status.results import SUCCESS
from buildbot.status.results import WARNINGS

LOOKUP_DICT = {}

if os.path.exists("users.txt"):
    with open("users.txt", "r") as stream:
        for line in stream.readlines():
            line = line.strip()
            name, email = line.split('\t')
            LOOKUP_DICT[name[1:-1]] = email[1:-1]
            
class EmailLookup(object):
    implements(IEmailLookup)

    def getAddress(self, name):
        twlog.msg("resolving name {0}".format(name))
        if '@' in name:
            return name
            
        if name in LOOKUP_DICT:
            return LOOKUP_DICT[name]
        else:
            return "vanelteren@strw.leidenuniv.nl"
        

def _defaultMessageIntro(mode, results, build):
    prev = build.getPreviousBuild()

    if results == FAILURE:
        if "change" in mode and prev and prev.getResults() != results or \
                "problem" in mode and prev and prev.getResults() != FAILURE:
            text = "The Buildbot has detected a new failure"
        else:
            text = "The Buildbot has detected a failed build"
    elif results == WARNINGS:
        text = "The Buildbot has detected a problem in the build"
    elif results == SUCCESS:
        if "change" in mode and prev and prev.getResults() != results:
            text = "The Buildbot has detected a restored build"
        else:
            text = "The Buildbot has detected a passing build"
    elif results == EXCEPTION:
        text = "The Buildbot has detected a build exception"

    return text


def _defaultMessageProjects(source_stamps, master_status):
    projects = []

    for ss in source_stamps:
        if ss.project and ss.project not in projects:
            projects.append(ss.project)

    if not projects:
        projects = [master_status.getTitle()]

    return ', '.join(projects)


def _defaultMessageURLs(master_status, build):
    text = ""

    # add build URL if available
    url = master_status.getURLForThing(build)
    if url:
        text += " Full details are available at:\n    %s\n" % url

    text += "\n"

    # add buildbot main URL if available
    url = master_status.getBuildbotURL()
    if url:
        text += "Buildbot URL: %s\n\n" % urllib.quote(url, '/:')

    return text


def _defaultMessageSourceStamps(source_stamps):
    text = ""

    for ss in source_stamps:
        source = ""

        if ss.branch:
            source += "[branch %s] " % ss.branch

        if ss.revision:
            source += str(ss.revision)
        else:
            source += "master"

        if ss.patch:
            source += " (plus patch)"

        discriminator = ""
        if ss.codebase:
            discriminator = " '%s'" % ss.codebase

        text += "Build Source Stamp%s: %s\n" % (discriminator, source)

    return text


def _defaultMessageSummary(build, results):
    t = build.getText()
    if t:
        t = ": " + " ".join(t)
    else:
        t = ""
        
    lastStep = build.getSteps()[-1]
    steptext = lastStep.getText()
    if steptext:
        steptext = " ".join(steptext)
    else:
        steptext = ""
        
    if results == SUCCESS:
        text = "Build succeeded!\n"
    elif results == WARNINGS:
        text = "Build Had Warnings%s\n" % t
    else:
        text = "BUILD FAILED%s\n" % t

    return steptext + '\n\n' + text

def defaultMessage(mode, name, build, results, master_status):
    """Generate a buildbot mail message and return a tuple of message text
        and type."""
    ss_list = build.getSourceStamps()

    text = _defaultMessageIntro(mode, results, build)
    text += " on builder %s while building %s." % \
            (name, _defaultMessageProjects(ss_list, master_status))

    text += _defaultMessageURLs(master_status, build)

    text += "Buildslave for this Build: %s\n\n" % build.getSlavename()
    text += "Build Reason: %s\n" % build.getReason()
    text += _defaultMessageSourceStamps(ss_list)
    text += "Blamelist: %s\n" % ",".join(build.getResponsibleUsers())
    text += "\n"

    text += _defaultMessageSummary(build, results)
    text += "\n"
    text += "Sincerely,\n"
    text += " -The Buildbot\n"
    text += "\n"

    return {'body': text, 'type': 'plain'}
        


class SVN(svn.SVN):
    @defer.inlineCallbacks
    def copy(self):
        cmd = buildstep.RemoteCommand('rmdir', {'dir': self.workdir,
                                                'logEnviron': self.logEnviron,})
        cmd.useLog(self.stdio_log, False)
        yield self.runCommand(cmd)

        if cmd.didFail():
            raise buildstep.BuildStepFailed()

        # temporarily set workdir = 'source' and do an incremental checkout
        try:
            old_workdir = self.workdir
            self.workdir = 'source'
            yield self.incremental(None)
        except: # finally doesn't work in python-2.4
            self.workdir = old_workdir
            raise
        self.workdir = old_workdir

        # if we're copying, copy; otherwise, export from source to build
        if self.method == 'copy':
            cmd = buildstep.RemoteCommand('cpdir',
                    { 'fromdir': 'source', 'todir':self.workdir,
                      'timeout': 1200,
                      'logEnviron': self.logEnviron })
        else:
            export_cmd = ['svn', 'export']
            if self.revision:
                export_cmd.extend(["--revision", str(self.revision)])
            export_cmd.extend(['source', self.workdir])

            cmd = buildstep.RemoteShellCommand('', export_cmd,
                    env=self.env, logEnviron=self.logEnviron, timeout=self.timeout)
        cmd.useLog(self.stdio_log, False)

        yield self.runCommand(cmd)

        if cmd.didFail():
            raise buildstep.BuildStepFailed()

def is_list_in_list(sub_list, in_list):
    if len(sub_list) == 0:
        return True
    first_element = sub_list[0]
    i = 0
    for k, element in enumerate(in_list):
        if k > len(in_list) - len(sub_list):
            break
        if element == first_element:
            has_match = True
            for j,test in enumerate(sub_list):
                if not test == in_list[k+j]:
                    has_match = False
                    break
            if has_match:
                return True
    return False
    
class Nose(ShellCommand):
    name = "nose"
    descriptionDone = ['testing done']
    
    def __init__(self,
        noseoptions = ['-v', 'test'], 
        command = None,  
        **kwarguments
    ):
        if command is None:
            nosecommand = [
                'mpiexec', 'nosetests'
            ]
        else:
            nosecommand = command
        if not is_list_in_list(noseoptions, nosecommand):
            nosecommand.extend(noseoptions)
        
        ShellCommand.__init__(self, command=nosecommand, **kwarguments)
        
        #self.addFactoryArguments(
        #    noseoptions = noseoptions
        #)
     
    def describe(self, done=False):
        if not done:
            return ['testing']
        else:
            return self.descriptionDone
 
    def createSummary(self, log):
        msgs = ['WARNING', 'ERROR', 'SEVERE']
        self.descriptionDone = self.descriptionDone[:]
        warnings = []
        next_line_is_summary = False
        summary_re = re.compile('^Ran\s+(\d+)\s+tests in\s+([\d\.]+)s')
        failed_re = re.compile('^FAILED\s+\((.+)\)')
        ok_re = re.compile('^OK\s+\((.+)\)')
        lines = log.getText().split('\n')
        number_of_tests = 0
        time_taken = None
        for line in lines:
            match = summary_re.match(line)
            if match:
                number_of_tests = int(match.group(1))
                time_taken = match.group(2)
        offset = -1
        counts = {'errors':0, 'failures': 0, 'SKIP':0}
        while offset > -100:
            last_line = lines[offset]
            if last_line.startswith('FAILED'):
                match = failed_re.match(last_line)
                if match:
                    content = match.group(1)
                    counts = self.parse_counts(content)
                    break
            elif last_line.startswith('OK'):
                match = ok_re.match(last_line)
                if match:
                    content = match.group(1)
                    counts = self.parse_counts(content)
                    break
            else:
                pass
            offset -= 1
        
        number_of_failures = counts['failures']
        number_of_errors = counts['errors']
        number_of_skipped = counts['SKIP']
        
        if number_of_tests > 0:
            #self.addCompleteLog("tests", str(number_of_tests))
            self.descriptionDone.append('{0} tests'.format(number_of_tests))
        if number_of_errors > 0:
            self.descriptionDone.append('{0} errors'.format(number_of_errors))
        if number_of_skipped > 0:
            self.descriptionDone.append('{0} skipped'.format(number_of_skipped))
        if number_of_failures > 0:
            self.descriptionDone.append('{0} failures'.format(number_of_failures))
            
        self.step_status.setStatistic('tests', number_of_tests)
        self.step_status.setStatistic('skipped', number_of_skipped)
        self.step_status.setStatistic('failures', number_of_failures)
        self.step_status.setStatistic('errors', number_of_errors)
    
    def parse_counts(self, str):
        parts = str.split(',')
        result = {'errors':0, 'failures': 0, 'SKIP':0}
        for x in parts:
            x = x.strip()
            name, count = x.split('=')
            count = int(count.strip())
            result[name.strip()] = count
        return result

@properties.renderer
def prefix_dir_for_prerequisites_build(props):
    workdir = str(props.getProperty('workdir'))
    result = os.path.join(workdir, 'build', 'buildenv')
    return result

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
#from buildbot.libvirtbuildslave import LibVirtSlave, Connection

c['slaves'] = [
#   LibVirtSlave(
#		'ubuntu-10.04-desktop-i386-mpich2', 
#		'amuse2bb',
#		Connection('qemu:///system'),
#        '/home/vanelteren/vm/ubuntu-10.04-desktop-i386-mpich2.img', 
#         #'/home/buildbot/images/base_image'
#   )
#   ,
#   LibVirtSlave(
#		'ubuntu-10.04-desktop-i386-openmpi', 
#		'amuse2cc',
#		Connection('qemu:///system'),
#         '/home/vanelteren/vm/ubuntu-10.04-desktop-i386-openmpi.img', 
#         #'/home/buildbot/images/base_image'
#   )
#   ,
#   LibVirtSlave(
#		'ubuntu-lucid-desktop-amd64-openmpi', 
#		'amuse2rr',
#		Connection('qemu:///system'),
#         '/var/lib/libvirt/images/ubuntu-lucid-desktop-amd64-openmpi.img', 
#         #'/home/buildbot/images/base_image'
#   )
#   ,
   BuildSlave(
		'strw-64bit-mpich2', 
		'amuse2dd',
		max_builds=1
   )
   ,
   BuildSlave(
		'zwin', 
		'amuse4dd', max_builds=1
   )
   ,
   BuildSlave(
		'pczaal18', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'biesbosch', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'bullewijk', 
		'amuse2ff' ,
		 max_builds=1
   )
   ,
   BuildSlave(
		'lgmII', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'paddegat', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'pczaal16', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'pczaal17', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'pczaal19', 
		'amuse4dd'
		, max_builds=1
   )
   ,
   BuildSlave(
		'lgm-node', 
		'amuse2ee'
		, max_builds=1
   )
   ,
   BuildSlave(
		'ubuntu-64bit', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'macos-64bit', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'macos-32bit', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'fedora8-64bit', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'centos5-64bit', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'strw-noord', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'strw-striene', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'strw-goot', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'strw-watering', 
		'amuse2ff'
		, max_builds=1
   )
   ,
   BuildSlave(
		'strw-zwartewater', 
		'amuse2ff'
		, max_builds=1
   )
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
if 0:
    from buildbot.changes.svnpoller import SVNPoller
    c['change_source'] = SVNPoller(
        svnurl='http://www.amusecode.org/svn/trunk',
        svnuser='buildbot',
        svnpasswd='build$5$bot',
        pollinterval=300,
        cachepath='/data2/vanelteren/buildbot/amuse/svnpoller.cache'
    )

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(
    repourl='https://github.com/amusecode/amuse.git',
    pollinterval=300,
    workdir='/data2/vanelteren/buildbot/gitpoller'
)
####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers import triggerable
from buildbot.schedulers import timed
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="full",
        change_filter=filter.ChangeFilter(branch='master'),
        treeStableTimer=120,
        builderNames=["strw-mpich2"]
    )
)
c['schedulers'].append(
    timed.Nightly(
		name='nightly-openmpi',
        branch=None,
        #builderNames=['ubuntu-32bit-openmpi-tests', 'gpubuild', 'make-source-release'],
        builderNames=['gpubuild', 'make-source-release'],
        hour=2,
        minute=0
   )
)
c['schedulers'].append(
    timed.Nightly(
		name='early-morning',
        branch=None,
        builderNames=['prerequisites'],
        hour=5,
        minute=0
   )
)

c['schedulers'].append(
    timed.Nightly(
		name='nightly-binbuild',
        branch=None,
        builderNames=[
            'binbuild',
        ],
        hour=21,
        minute=0
   )
)
c['schedulers'].append(
    timed.Nightly(
	name='nightly-osx-build',
        branch=None,
        builderNames=['binbuild-Darwin_x86_64',],
        hour=15,
        minute=0
   )
)

c['schedulers'].append(
    timed.Nightly(
		name='early-evening-build',
        branch=None,
        builderNames=[
            #'binbuild-Darwin_i386', 
            "python3.6-core",
            #"gcc+ifort-9.1-64bit-download"
        ],
        hour=18,
        minute=0
   )
)

c['schedulers'].append(
    timed.Nightly(
	name='nightly-mpich2',
        branch=None,
        builderNames=[
            #'ubuntu-32bit-mpich2-tests', 
            "strw-mpich-nompi",
            'strw-download-mpich2', 
            #'gcc+ifort-9.1-64bit'
        ],
        hour=3,
        minute=0
   )
)

c['schedulers'].append(
    ForceScheduler(
        name="force",
        builderNames=[
            #"ubuntu-64bit-openmpi-tests", 
            #"ubuntu-64bit-openmpi-deb",
            #"ubuntu-32bit-openmpi-deb",
            #'ubuntu-32bit-openmpi-tests', 
            "strw-examples", 
            #'binbuild-Darwin_i386', 
            'binbuild-Darwin_x86_64',
            'binbuild',
            'prerequisites',
            'gpubuild', 
            'make-source-release',
            "strw-mpich2",
            "update-documentation",
            #"gcc+ifort-9.1-64bit",
            #"gcc+ifort-9.1-64bit-download",
            "strw-download-mpich2",
            "python3.6-core",
            "strw-mpich-nompi"
        ]
    )
)
c['schedulers'].append(
    Try_Userpass(
        name="tryout",
        builderNames=["strw-mpich2", "strw-mpich-nompi"],
        port="tcp:8031:interface=127.0.0.1",
        userpass=[("vanelteren","nbwg2"),] 
    )
)
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.


c['builders'] = []

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import StringDownload
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import Property
from buildbot.config import BuilderConfig
from buildbot.process.properties import WithProperties
import time

for arch, buildernames, slavenames in (
	#('i386', ["ubuntu-32bit-openmpi-tests","ubuntu-32bit-openmpi-deb"], ["ubuntu-10.04-desktop-i386-openmpi"]),
	#('amd64', ["ubuntu-64bit-openmpi-tests","ubuntu-64bit-openmpi-deb"], ["ubuntu-lucid-desktop-amd64-openmpi"]),
	):
    factory = BuildFactory()
    # check out the source
    factory.addStep(
        git.Git(
            repourl='https://github.com/amusecode/amuse.git', 
            mode='full',
            method='copy',
            clobberOnFailure = True
        )
    )

    # run configure
    factory.addStep(
        ShellCommand(
            command=["./configure"],
            env={'PYTHON': '/usr/bin/python'}
        )
    )

    # make the code
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["make"]))
    factory.addStep(ShellCommand(command=["sleep", "30"]))
    #factory.addStep(ShellCommand(command=["nosetests", "-v", "test"]))
    factory.addStep(Nose(noseoptions=["-v", "test"]))
    c['builders'].append(
        BuilderConfig(
          name=buildernames[0],
          slavenames=slavenames,
          factory=factory
        )
    )

    #
    # Make ubuntu 32bit package
    #


    factory = BuildFactory()
    # check out the source
    factory.addStep(
        git.Git(
            repourl='https://github.com/amusecode/amuse.git', 
            mode='full',
            method='copy',
            branch='master',
            clobberOnFailure = True
        )
    )

    factory.addStep(ShellCommand(command=["make", "distclean"]))
    factory.addStep(
        ShellCommand(
            command=["./configure"],
            env={'PYTHON': '/usr/bin/python'}
        )
    )
    factory.addStep(
        ShellCommand(
            command=[
                "python", 
                "support/debian.py",
                WithProperties("--version=r%(got_revision)s"),
                WithProperties("--arch=%(arch)s", arch = lambda x:arch),
            ]
        )
    )
    factory.addStep(
        FileUpload(
            slavesrc=WithProperties("amuse_r%(got_revision)s-0ubuntu-%(arch)s.deb", arch = lambda x: arch),
            masterdest=WithProperties("~/packages/ubuntu_10.04/amuse_r%(got_revision)s-0ubuntu-%(arch)s.deb", arch = lambda x: arch),
            mode=0644
        )
    )

    c['builders'].append(
        BuilderConfig(
          name=buildernames[1],
          slavenames=slavenames,
          factory=factory
        )
    )


#
#
#







factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        mode='full',
        method='copy',
        branch='master',
        clobberOnFailure = True
    )
)

# run configure
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)

# make the code
factory.addStep(ShellCommand(command=["mpdboot"]))
factory.addStep(ShellCommand(command=["mpdcheck"]))
factory.addStep(ShellCommand(command=["make", "clean"]))

factory.addStep(ShellCommand(command=["nosetests", "-v", "test/codes_tests/test_python_implementation.py"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(ShellCommand(command=["sleep", "45"]))
factory.addStep(ShellCommand(command=["mpdtrace"]))
#factory.addStep(ShellCommand(command=["nosetests", "-v", "test"]))
factory.addStep(Nose(noseoptions=["-v", "test"]))
factory.addStep(ShellCommand(command=["mpdallexit"]))

# run all tests
#factory.addStep(
#    ShellCommand(
#        command=["nosetests","-v", "test"]
#    )
#)
#c['builders'].append(
#    BuilderConfig(
#	  name="ubuntu-32bit-mpich2-tests",
#      slavenames=[
#		"ubuntu-10.04-desktop-i386-mpich2"
#	  ],
#      factory=factory)
#)


#
#  FOR STRW MACHINE'S
#

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='clobber'
    )
)
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        #env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(ShellCommand(command=["make", "clean"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "examples", "src"]
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-mpich2",
		slavenames=["zwin", "biesbosch",  "paddegat", "pczaal19", "pczaal18", "pczaal17", "pczaal16", "strw-64bit-mpich2"],
		factory=factory
	)
)


#
#  FOR STRW MACHINE'S, NO MPI
#

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='clobber'
    )
)

factory.addStep(
    ShellCommand(
        command=["./configure", "--disable-mpi"],
        #env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(ShellCommand(command=["make", "clean"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    Nose(
        command=["nosetests"],
        noseoptions=["--with-doctest", "-v", "test", "examples", "src"]
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-mpich-nompi",
		slavenames=["zwin", "bullewijk", "biesbosch",  "paddegat", "pczaal19", "pczaal18", "pczaal17", "pczaal16", "strw-64bit-mpich2"],
		factory=factory
	)
)


#
# Check examples
#

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

factory.addStep(ShellCommand(command=["./configure"]))
factory.addStep(ShellCommand(command=["make", "clean"]))

factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    ShellCommand(
        command=["python", "sandbox/vanelteren/check_examples.py"],
        env={'PYTHONPATH': 'src',},
        timeout=72000
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-examples",
		slavenames=["zwin", "biesbosch",  "paddegat", "pczaal16", "pczaal17", "pczaal18", "pczaal19", "strw-64bit-mpich2"],
		factory=factory
	)
)



#
# Update Documentation
#

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

factory.addStep(ShellCommand(command=["./configure"]))
factory.addStep(ShellCommand(command=["make", "clean"]))

factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
	ShellCommand(
		command=["mpiexec", "make", "html"],
        timeout=72000,
        haltOnFailure=True
	)
)


factory.addStep(
    DirectoryUpload(
        slavesrc="doc/build/html",
        masterdest="/data2/vanelteren/buildbot/packages/doc/html"
    )
)

factory.addStep(
	MasterShellCommand(
		command = [
            "ssh" , 
            "-i",  "/home/vanelteren/.scripts/fordoctor",
			"amuse@amuse", 
            "rm", "-rf", "doc/html"])
)

factory.addStep(
	MasterShellCommand(
		command = [
            "scp" , 
            "-i",  "/home/vanelteren/.scripts/fordoctor",
			"-r", "/data2/vanelteren/buildbot/packages/doc/html",  "amuse@amuse:doc/"
        ])
)


factory.addStep(
	ShellCommand(
		command=["mpiexec", "make", "pdf"],
        timeout=72000,
        haltOnFailure=True,
        workdir="build/doc"
	)
)

for x in ["design-doc.pdf", "installation.pdf","reference-doc.pdf","tutorial.pdf"]:
    factory.addStep(
        FileUpload(
            slavesrc="doc/build/pdf/"+x,
            masterdest="/data2/vanelteren/buildbot/packages/doc/pdf/"+x
        )
    )



for x in ["design-doc.pdf", "installation.pdf","reference-doc.pdf","tutorial.pdf"]:
    factory.addStep(
        MasterShellCommand(
            command = [
                "scp" , 
                "-i",  "/home/vanelteren/.scripts/fordoctor",
                "/data2/vanelteren/buildbot/packages/doc/pdf/"+x,  "amuse@amuse:doc/html"
            ])
    )


factory.addStep(
	MasterShellCommand(
		command = [
            "ssh" , 
            "-i",  "/home/vanelteren/.scripts/fordoctor",
			"amuse@amuse", 
			"chmod", "-R", "og+rX", "doc"])
)


c['builders'].append(
	BuilderConfig(
		name="update-documentation",
		slavenames=["zwin", "biesbosch", "paddegat", "pczaal16", "pczaal17", "pczaal18", "pczaal19", "strw-64bit-mpich2"],
		factory=factory
	)
)

#
# Python 3
#

for buildername, slavenames in (
        ('python3.6-core',['strw-zwartewater']), 
        #('icc+ifort-12-64bit','strw-noord'),#'strw-striene'
    ):

    factory = BuildFactory()
    # check out the source
    factory.addStep(
        git.Git(
            repourl='https://github.com/amusecode/amuse.git', 
            branch='master',
            mode='full',
            method='clobber',
            clobberOnFailure = True
        )
    )
    factory.addStep(
        ShellCommand(
            command=["./configure"],
            env={
                'PYTHON': 'python3',
                'PYTHONCONFIG':'python3.6-config'
                }
        )
    )
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["python3", "setup.py", "build"]))
    factory.addStep(ShellCommand(command=["python3", "setup.py", "install", "--prefix", "python36"]))
    
    factory.addStep(
        StringDownload(
            "backend : Agg",
            slavedest="matplotlibrc"
        )
    )
    
    factory.addStep(
        Nose(
            command=['mpiexec', 'nosetests-3.6'],
            noseoptions=[ "-v", "amuse.test.suite.core_tests", "--debug-log=dbg.log"],
            env={'PYTHONPATH': '../build/python36/lib/python3.6/site-packages/'},
            workdir='python36'
            
        )
    )
    factory.addStep(
        Nose(
            command=['mpiexec.hydra','-launcher', 'fork', 'nosetests-3.6'],
            noseoptions=["-v", "amuse.test.suite.codes_tests", "--debug-log=dbg.log"],
            env={'PYTHONPATH': '../build/python36/lib/python3.6/site-packages/:../../build/python36/lib/python3.6/site-packages/'},
            workdir='python36'
        )
    )

    c['builders'].append(
        BuilderConfig(
            name=buildername,
            slavenames=slavenames,
            factory=factory
        )
    )


#
# Fort ifort 9.1 and icc/ifort 12
#


for buildername, slavename in (
        #('gcc+ifort-9.1-64bit','strw-goot'), 
        #('icc+ifort-12-64bit','strw-noord'),#'strw-striene'
    ):

    factory = BuildFactory()
    # check out the source
    factory.addStep(
        git.Git(
            repourl='https://github.com/amusecode/amuse.git', 
            branch='master',
            mode='incremental',
            method='clobber',
            clobberOnFailure = True
        )
    )
    factory.addStep(ShellCommand(command=["mpdboot", "--chkup"]))
    
    factory.addStep(
        ShellCommand(
            command=["./configure"]
        )
    )
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["make"]))
    
    factory.addStep(
        StringDownload(
            "backend : Agg",
            slavedest="matplotlibrc"
        )
    )
    
    factory.addStep(
        Nose(
            noseoptions=["--nologcapture", "--with-doctest", "-v", "test", "examples", "src"]
        )
    )

    c['builders'].append(
        BuilderConfig(
            name=buildername,
            slavenames=[slavename],
            factory=factory
        )
    )
    

# for ifort with download
for buildername, slavename in (
        #('gcc+ifort-9.1-64bit-download','strw-goot'), 
        #('icc+ifort-12-64bit-download','strw-noord'),#'strw-striene'
    ):

    factory = BuildFactory()
    # check out the source
    factory.addStep(
        git.Git(
            repourl='https://github.com/amusecode/amuse.git', 
            branch='master',
            mode='full',
            method='copy',
            clobberOnFailure = True
        )
    )
    factory.addStep(ShellCommand(command=["mpdboot", "--chkup"]))
    
    factory.addStep(
        ShellCommand(
            command=["./configure"]
        )
    )
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["make"],env = {'DOWNLOAD_CODES':'1'}))
    
    factory.addStep(
        StringDownload(
            "backend : Agg",
            slavedest="matplotlibrc"
        )
    )
    
    factory.addStep(
        Nose(
            noseoptions=["--nologcapture", "--with-doctest", "-v", "test", "examples", "src"]
        )
    )

    c['builders'].append(
        BuilderConfig(
            name=buildername,
            slavenames=[slavename],
            factory=factory
        )
    )


#
#  FOR NIGHTLY BUILD OF SOURCE FILE
#

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='clobber',
        clobberOnFailure = True
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
		env={
			'PYTHON': '/usr/bin/python'
		}
	)
)
factory.addStep(
	ShellCommand(
		command= ["make", "nightly"],
		env={
			'VERSION': WithProperties("%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d')),
			'PYTHON': '/usr/bin/python'
		}
	)
)

factory.addStep(
	FileUpload(
		slavesrc=WithProperties("dist/amuse-%(datestr)s.dev%(got_revision)s.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("/data2/vanelteren/buildbot/packages/source/amuse-%(datestr)s.dev%(got_revision)s.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)

factory.addStep(
    ShellCommand(
        command= ["tar", "-xf", WithProperties("amuse-%(datestr)s.dev%(got_revision)s.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')) ],
        workdir='build/dist'
    )
)

factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'},
        workdir=WithProperties("build/dist/amuse-%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d')),
    )
)

factory.addStep(
    ShellCommand(
        command=["make"],
        workdir=WithProperties("build/dist/amuse-%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d'))
    )
)
factory.addStep(
	StringDownload(
		"backend : Agg",
                slavedest=WithProperties("dist/amuse-%(datestr)s.dev%(got_revision)s/matplotlibrc",datestr = lambda x : time.strftime('%Y%m%d'))
	)
)

factory.addStep(
    Nose(
        noseoptions=["-v", "test"],
        workdir=WithProperties("build/dist/amuse-%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d'))
    )
)

factory.addStep(
    ShellCommand(
        command=["make"],
	env = {'DOWNLOAD_CODES':'1'},
        workdir=WithProperties("build/dist/amuse-%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d'))
    )
)

factory.addStep(
    Nose(
        noseoptions=["-v", "test"],
        workdir=WithProperties("build/dist/amuse-%(datestr)s.dev%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d'))
    )
)

c['builders'].append(
	BuilderConfig(
		name="make-source-release",
		slavenames=["biesbosch", "bullewijk", "paddegat", "pczaal19", "pczaal17", "pczaal16", "zwin"],
		factory=factory
	)
)



#
# For STRW with also DOWNLOAD CODES
#


factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='copy',
        clobberOnFailure = True
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
        	env={'PYTHON': '/usr/bin/python'}
	)
)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)

factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "examples", "src"]
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-download-mpich2",
		slavenames=["bullewijk", "biesbosch", "paddegat", "pczaal18", "pczaal17", "pczaal19","zwin"],
		factory=factory
	)
)
#
# For STRW with DOWNLOAD and slow (TURNED OFF, TAKES WAAAY TOO LONG)
#


factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='copy',
        clobberOnFailure = True
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
        	env={'PYTHON': '/usr/bin/python'}
	)
)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    ShellCommand(
        command=["nosetests", "-m", "(?:^|[b_.-]|[Ss]low)[Tt]est", "-v", "test"],
        timeout=72000
    )
)

if False:
	c['builders'].append(
		BuilderConfig(
			name="strw-slow-mpich2",
			slavenames=["strw-64bit-mpich2"],
			factory=factory
		)
	)

########################################################################
# GPU BUILDS 
factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

gcc44prefix = '/home/vanelteren/amuse/env44'
gcc44env = {
    'PREFIX': gcc44prefix,
    'PATH': gcc44prefix+'/bin:${PATH}',
    'LD_LIBRARY_PATH': gcc44prefix+'/lib:${LD_LIBRARY_PATH}',
    'FC':'gfortran44',
    'F77':'gfortran44',
    'CC':'gcc44',
    'CXX':'g++44',
    'PYTHON': gcc44prefix+'/bin/python',
    'PYTHONCONFIG': gcc44prefix+'/bin/python-config',
    'MPD_TMPDIR':'/home/vanelteren/mpd44/'
}


#factory.addStep(ShellCommand(command=["mpdboot", "--chkup"],env=gcc44env))
#factory.addStep(ShellCommand(command=["mpdcheck"],env=gcc44env))

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda", "--enable-sapporo2"], 
        env=gcc44env
    )
)
factory.addStep(ShellCommand(command=["make", "clean"],env=gcc44env))
factory.addStep(ShellCommand(command=["make"],env=gcc44env))


factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "src/amuse/datamodel", "src/amuse/support"],
        env=gcc44env
    )
)
#factory.addStep(ShellCommand(command=["mpdallexit"],env=gcc44env))

#c['builders'].append(
#    BuilderConfig(
#        name="gpubuild44",
#        slavenames=["lgm-node"],
#        factory=factory
#    )
#)
########################################################################

factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

gcc44prefix = '/home/vanelteren/amuse/env44'
gcc44env2 = {
    'PREFIX': gcc44prefix,
    'PATH': gcc44prefix+'/bin:${PATH}',
    'LD_LIBRARY_PATH': gcc44prefix+'/lib:${LD_LIBRARY_PATH}',
    'FC':'gfortran44',
    'F77':'gfortran44',
    'CC':'gcc44',
    'CXX':'g++44',
    'PYTHON': gcc44prefix+'/bin/python',
    'MPD_TMPDIR':'/home/vanelteren/mpd44/',
    'PYTHONCONFIG': gcc44prefix+'/bin/python-config',
    'DOWNLOAD_CODES':'1'
}

factory.addStep(ShellCommand(command=["mpdboot", "--chkup"],env=gcc44env2))
factory.addStep(ShellCommand(command=["mpdcheck"],env=gcc44env2))

factory.addStep(ShellCommand(command=["make", "distclean"],env=gcc44env2))

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda", "--enable-sapporo2"], 
        env=gcc44env2
    )
)
factory.addStep(ShellCommand(command=["make", "clean"],env=gcc44env2))
factory.addStep(ShellCommand(command=["make"],env=gcc44env2))


factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "src/amuse/datamodel", "src/amuse/support"],
        env=gcc44env2
    )
)
factory.addStep(ShellCommand(command=["mpdallexit"],env=gcc44env2))

#c['builders'].append(
#    BuilderConfig(
#        name="gpubuild44-download",
#        slavenames=["lgm-node"],
#        factory=factory
#    )
#)
########################################################################
factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

gcc44prefix = '/home/vanelteren/amuse/env44'
gcc44env = {
    'PREFIX': gcc44prefix,
    'PATH': gcc44prefix+'/bin:${PATH}',
    'LD_LIBRARY_PATH': gcc44prefix+'/lib:${LD_LIBRARY_PATH}',
    'FC':'gfortran44',
    'F77':'gfortran44',
    'CC':'gcc44',
    'CXX':'g++44',
    'MPD_TMPDIR':'/home/vanelteren/mpd44/'
}

factory.addStep(ShellCommand(command=["mpdboot", "--chkup"],env=gcc44env))
factory.addStep(ShellCommand(command=["mpdcheck"],env=gcc44env))

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda"], 
        env=gcc44env
    )
)
factory.addStep(ShellCommand(command=["make", "clean"],env=gcc44env))
factory.addStep(ShellCommand(command=["make"],env=gcc44env))


factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "src/amuse/datamodel", "src/amuse/support"],
        env=gcc44env
    )
)
factory.addStep(ShellCommand(command=["mpdallexit"],env=gcc44env))

#c['builders'].append(
#    BuilderConfig(
#        name="gpubuild44-sapporo_light",
#        slavenames=["lgm-node"],
#        factory=factory
#    )
#)
########################################################################



factory = BuildFactory()
# check out the source
factory.addStep(
    git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='incremental',
        method='clobber',
        clobberOnFailure = True
    )
)

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda", "--enable-sapporo2"], 
        env={}
    )
)
factory.addStep(ShellCommand(command=["make", "clean"]))
factory.addStep(ShellCommand(command=["make"]))

factory.addStep(
    StringDownload(
         "backend : Agg",
          slavedest="matplotlibrc"
  )
)

factory.addStep(
    Nose(
        noseoptions=["-v", "test"],
        timeout=4800
    )
)

c['builders'].append(
    BuilderConfig(
        name="gpubuild",
        slavenames=["lgmII"],
        factory=factory
    )
)
########################################################################



factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        repourl='https://github.com/amusecode/amuse/trunk', 
        mode='full',
        method='copy',
        extra_args=[],
    )
)

factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(
    command=["./build_amuseapp.sh"], 
    workdir='build/support/distribute/binbuild/build',
    env={'LC_ALL':'C', 'LANG':'C'},
    timeout=72000
))

factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("/data2/vanelteren/buildbot/packages/binary/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/data2/vanelteren/buildbot/packages/binary/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/data2/vanelteren/buildbot/packages/binary/amuse-latests-Darwin_x86_64.tar.gz'
		]
	)
)
#factory.addStep(ShellCommand(command=["sudo", "shutdown", "-h", "now"]))

c['builders'].append(
	BuilderConfig(
		name="binbuild-Darwin_x86_64",
		slavenames=["macos-64bit"],
		factory=factory
	)
)


factory = BuildFactory()
factory.addStep(
    SVN(
        repourl='https://github.com/amusecode/amuse/trunk', 
        mode='full',
        method='copy',
    )
)



factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(
    command=["./build_amuseapp.sh"], 
    workdir='build/support/distribute/binbuild/build',
    env={'OSX_BIT':'32bit'},
    timeout=72000
))


factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/binary/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/data2/vanelteren/buildbot/packages/binary/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/data2/vanelteren/buildbot/packages/binary/amuse-latests-Darwin_i386.tar.gz'
		]
	)
)
#factory.addStep(ShellCommand(command=["sudo", "shutdown", "-h", "now"]))
if False:
	c['builders'].append(
		BuilderConfig(
			name="binbuild-Darwin_i386",
			slavenames=["macos-32bit"],
			factory=factory
		)
	)


factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        repourl='https://github.com/amusecode/amuse/trunk', 
        mode='full',
        method='copy',
        extra_args=[],
    )
)

factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(command=["./build_amuseapp.sh"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/binary/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/data2/vanelteren/buildbot/packages/binary/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/data2/vanelteren/buildbot/packages/binary/amuse-latests-Linux_x86_64.tar.gz'
		]
	)
)

factory.addStep(ShellCommand(command=["sudo", "poweroff"]))

c['builders'].append(
	BuilderConfig(
		name="binbuild",
		slavenames=["centos5-64bit"],
		factory=factory
	)
)

########################################################################
customenv = {
    'PREFIX': prefix_dir_for_prerequisites_build,
    'PATH': Interpolate('%s/bin:${PATH}',prefix_dir_for_prerequisites_build),
    'LD_LIBRARY_PATH': Interpolate('%s/lib:${LD_LIBRARY_PATH}',prefix_dir_for_prerequisites_build),
    'FC':'gfortran',
    'F77':'gfortran',
    'CC':'gcc',
    'CXX':'g++',
}

factory = BuildFactory()
# check out the source
factory.addStep(
    ShellCommand(
        command=["rm", "-Rf", prefix_dir_for_prerequisites_build], 
        env=customenv,
        workdir='build/doc/install'
    )
)

factory.addStep(
   git.Git(
        repourl='https://github.com/amusecode/amuse.git', 
        branch='master',
        mode='full',
        method='clobber',
        clobberOnFailure = True
    )
)

factory.addStep(
    ShellCommand(
        command=["mkdir", "-p", prefix_dir_for_prerequisites_build], 
        env=customenv,
        workdir='build/doc/install'
    )
)

factory.addStep(
    ShellCommand(
        command=["install-python.sh"], 
        env=customenv,
        workdir='build/doc/install'
    )
)

factory.addStep(
    ShellCommand(
        command=["python", "install.py", "install"], 
        env=customenv,
        workdir='build/doc/install'
    )
)

factory.addStep(
    ShellCommand(
        command=["./configure"], 
        env=customenv
    )
)
c['builders'].append(
    BuilderConfig(
        name="prerequisites",
        slavenames=["strw-noord", "bullewijk", "paddegat", "pczaal19", "pczaal18"],
        factory=factory
    )
)

########################################################################
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status.web import auth

authz_cfg = authz.Authz(
    auth=(auth.HTPasswdAuth('/home/vanelteren/buildbot/amuse/trac.htpasswd')),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "AMUSE"
c['titleURL'] = "http://www.amusecode.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://www.amusecode.org/buildbot/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"


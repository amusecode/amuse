AC_CONFIG_AUX_DIR([shared])
AC_CONFIG_MACRO_DIRS([shared/m4])

AC_INIT([amuse-{code}], [1.0])

# Pick up Conda env or virtualenv
AMUSE_VENV()

# Set CPU_COUNT
AX_COUNT_CPUS()
AC_SUBST(CPU_COUNT)

# Find the compiler(s)
AC_PROG_FC()
AX_FC_ISO_C_BINDING()

# Find tools for creating static libraries
AC_CHECK_TARGET_TOOL([AR], [ar], [:])
AS_IF([test $AR = ":"], [AC_MSG_ERROR([ar command not found.])])

AC_PROG_RANLIB()
AS_IF([test $RANLIB = ":"], [AC_MSG_ERROR([ranlib command not found.])])


# Find tools to download and unpack with
# AMUSE_DOWNLOAD()
# AC_CHECK_TOOL(TAR, tar)
# AC_CHECK_TOOL(UNZIP, unzip)
# AC_CHECK_TOOL(GUNZIP, gunzip)
# AC_CHECK_TOOL(BUNZIP2, bunzip2)
# AC_CHECK_TOOL(UNXZ, unxz)
# AC_CHECK_TOOL(PERL, perl)


# Find AMUSE libraries
# AMUSE_LIB_STOPCOND()
# AMUSE_LIB_STOPCONDMPI()
# AMUSE_LIB_AMUSE_MPI()
AMUSE_LIB_FORSOCKETS()
# AMUSE_LIB_SIMPLE_HASH()
# AMUSE_LIB_G6LIB()
# AMUSE_LIB_SAPPORO_LIGHT()


# Find external dependencies
AC_LANG_PUSH([Fortran])

##### MPI is always needed to build the worker #####
AX_MPI()

##### Remove anything not needed by the code #####

# AC_OPENMP()
# AC_SUBST(OPENMP_FCFLAGS)

# AMUSE_CUDA()
# AMUSE_OPENCL()

# AX_LAPACK()     # calls AX_BLAS automatically
# AX_PATH_GSL(1.0, [FOUND_GSL=yes])
# AX_GMP()
# AX_MPFR()
# AX_FFTW()
# AX_LIB_HDF5()
# AX_LIB_NETCDF4()

##### End remove anything not needed by the code #####

AC_LANG_POP([Fortran])


# Generate output
AC_CONFIG_FILES([config.mk])
AC_OUTPUT


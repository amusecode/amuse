diff -u -r mesa-r15140/utils/makefile_header mesa-r15140.new/utils/makefile_header
--- mesa-r15140/utils/makefile_header	2020-12-02 11:56:28.000000000 +0100
+++ mesa-r15140.new/utils/makefile_header	2024-12-17 10:27:40.052958483 +0100
@@ -1,7 +1,4 @@
-# NOTE: this default version of makefile_header
-# assumes you will be using the mesasdk.
-# if you do not want that, you can use the
-# makefile_header_non_mesasdk file as a template.
+#!/bin/bash
 
 # NOTE: MESA is no longer supported on 32-bit systems.  This isn't by design;
 # we simply haven't been able to get it to work!  So if you really-really want 
@@ -15,30 +12,13 @@
 endif
 endif
 
+# step 1) specify your compilers
 
-ifndef MESASDK_ROOT
-ifndef MESA_DIR_INTENTIONALLY_EMPTY
-$(error MESASDK_ROOT enviroment variable is not set)
-endif
-endif
-
-#mesasdk_init adds $MESASDK_ROOT to $PATH
-ifeq ($(findstring $(MESASDK_ROOT), $(PATH)),)
-ifndef MESA_DIR_INTENTIONALLY_EMPTY
-$(error The MESASDK has not been initialized)
-endif
-endif
+# NOTE: recent versions of mesa have required reduced optimization 
+# in order to work with ifort; we suggest using gfortran instead of ifort if possible.
 
-# Check mesasdk version
-ifdef MESASDK_ROOT
-ifndef MESA_DIR_INTENTIONALLY_EMPTY
-# Check for whether the sdk ships crmath
-MINIMUM_VERSION = 20.3.1
-ifneq ($(shell $(MESA_DIR)/utils/check_sdk_version $(MINIMUM_VERSION)),passed)
-$(error Your MESASDK is too old please update to version $(MINIMUM_VERSION) or newer)
-endif
-endif
-endif
+CC = $(MPICC)
+FC =  $(MPIFC)
 
 # Set optimization level
 ARCH = $(shell uname -m)
@@ -53,112 +33,243 @@
 endif
 
 
-# step 1) specify your compilers
-
-# NOTE: recent versions of mesa have required reduced optimization 
-# in order to work with ifort; we suggest using gfortran instead of ifort if possible.
+# if you need special flags for the compiler, define them here:
+SPECIAL_FC_FLAGS = $(CFLAGS)
+SPECIAL_C_FLAGS = $(FCFLAGSs)
+
+# step 1.a) [temporary workaround for loader problem on Mac:] 
+#           go down to select the correct entry for LOAD_MATRIX 
+#           depending on whether you are on Linux or Mac 
 
-FC = gfortran
-CC = gcc
-
-
-# step 2) specify whether to use crmath for math library
+# step 2) specify whether to use crmth for math library
 
 USE_CRMATH = YES
 
 ifeq ($(USE_CRMATH),YES)
-LOAD_CRMATH = `mesasdk_crmath_link`
+LOAD_CRMATH = -L$(MESA_DIR)/lib -lcrmath -lcrlibm
 export MESASDK_MATH_SLOT = crmath
+INCLUDE_CRMATH = -I$(MESA_DIR)/include
 endif
 
-# step 3) specify which LAPACK and BLADS libraries to use for mesa/mtx
-
-WHICH_LAPACK95 =
-WHICH_LAPACK =
-WHICH_BLAS =
-LOAD_LAPACK95 = `mesasdk_lapack95_link`
-LOAD_LAPACK = `mesasdk_lapack_link`
-LOAD_BLAS = `mesasdk_blas_link`
+# step 3) specify which BLAS and LAPACK libraries to use for mesa/mtx
 
+# these are the standard defaults
+WHICH_LAPACK = 
+LOAD_LAPACK = $(LAPACK_LIBS) -llapack95
+WHICH_BLAS = 
+LOAD_BLAS = $(BLAS_LIBS) $(LAPACK_LIBS) -llapack95
+MKL_INCLUDE = 
 
 # step 4) do you want to use PGPLOT with mesa/star?                                                                                     
+# you can have onscreen plots updated at each step,                                                                                     
+# and you can save files for making movies.  very cool!                                                                                 
 
-USE_PGSTAR = YES
-LOAD_PGPLOT = `mesasdk_pgplot_link` -lz
+# NOTE: you need to have a PGPLOT built using the same fortran and c compiler as you                                                    
+# are using for mesa.                                                                                                                   
 
+# if you don't already have a compatible pgplot,                                                                                         
+# follow the instructions in pgplot/README                                                                                               
 
-# step 5) do you want to use SE with mesa/star?
+# to access pgplot from mesa/star,                                                                                                       
+# set USE_PGSTAR = YES and set LOAD_PGPLOT to load the libraries.                                                                       
+# in mesa/star, set the control parameter pgstar_flag = .true. in &star_job                                                             
+# when you run star it will open a window using X and draw plots using PGSTAR                                                           
+# the plots will be updated each time a log entry is made.                                                                               
+# see star/test/src/pgstar_defaults.dek for details.                                                                                     
+
+# NOTE: if you have libpng, then include '-lpng' in the LOAD_PGPLOT line.                                                               
+# the *.png files are excellent for making movies.                                                                                       
+# but if you don't have libpng and can't get it, no problem; it isn't required.                                                         
+# just remove '-lpng' from the LOAD_PGPLOT line.                                                                                         
+
+# Similarly, if you don't have X windows and don't want to make onscreen plots,                                                         
+# then you can load PGPLOT without it.  Just delete the X stuff from LOAD_PGPLOT.                                                       
+
+# for users of Red Hat OS: Georgios Magkotsios reports success with these settings:                                                     
+#LOAD_PGPLOT = -L${PGPLOT_DIR} -lpgplot -L/usr/lib64 -lX11 -lsvml -lpng                                                                 
+#FCstatic = -shared-intel #-Bstatic -static-intel                                                                                       
+
+# for Ubuntu, Philip Pinto found these libraries to be necessary:                                                                       
+#LOAD_PGPLOT = -L${PGPLOT_DIR} -lpgplot  -lX11 -lxcb -lXau -lXdmcp -lXext -lpng -lz                                                    
+
+# for Fedora 12 (x86_64), Mike Zingale reported that the following worked                                                               
+# 1. at the terminal:                                                                                                                   
+#  yum install pgplot pgplot-devel                                                                                                       
+# 2. in the mesa/util/makefile_header                                                                                                   
+# USE_PGSTAR = YES                                                                                                                       
+# LOAD_PGPLOT = -lpgplot -L/usr/lib64 -lX11 -lpng                                                                                       
+# 3. it is also important that the following environment variable be set:                                                               
+# export PGPLOT_DIR=/usr/share/pgplot/  
 
-# SE is now supported using run_star_extras.  contact Falk Herwig for info.
 
+# NOTE: a change in USE_PGSTAR doesn't take effect until you next recompile mesa/star
 
-# step 6) do you want to use HDF5 with mesa/star? 
-# Currently we use HDF5 for weak nuclear reaction rates
-USE_HDF5 = YES
-LOAD_HDF5 = `mesasdk_hdf5_link`
+# for now, GYRE is only available with the mesasdk 
+USE_GYRE = YES
 
+# See http://www.gnu.org/software/make/manual/make.html#Testing-Flags for findstring
+ifneq (,$(findstring ifort,$(FC)))
 
-# step 7) do you want to use GYRE?
+USE_PGSTAR = NO
+LOAD_PGPLOT = 
 
-# if you don't plan to use GYRE and want to skip building it, then
-#USE_GYRE = NO
-# if you want to have GYRE built along with the rest of mesa, then
-USE_GYRE = YES
+#USE_PGSTAR = YES
+#LOAD_PGPLOT = -L/Users/bpaxton/mesa/utils/pgplot -lpgplot -L/usr/X11R6/lib -lX11 -lpng
+#LOAD_PGPLOT = -L/rpod2/opt/pgplot -lpgplot -L/usr/X11R6/lib -lX11 -lpng
+
+FC_fixed_preprocess = -fpp
+FC_free_preprocess = -fpp
 
+else
+ifneq (,$(findstring gfortran,$(FC)))
 
-# step 8) now do the mesa install
+#USE_PGSTAR = NO
+#LOAD_PGPLOT = 
+USE_PGSTAR = NO
+LOAD_PGPLOT = 
+
+FC_fixed_preprocess = -cpp
+FC_free_preprocess = -cpp
+
+else
+
+USE_PGSTAR = NO
+LOAD_PGPLOT = 
+
+FC_fixed_preprocess = -cpp
+FC_free_preprocess = -cpp
+
+endif
+endif
 
-USE_OPENMP = YES
 
 
-# step 9) Build shared libraries? Needed if you want mesa to be usable in python
+
+
+# step 5) Load options for HDF5, this must be compiled with the same compilier as mesa
+
+# To install hdf5 in $MESA_DIR/utils with ifort run:
+#export CC=icc
+#export F9X=ifort
+#export CXX=icpc
+#export VERSION=1.8.17
+#cd $MESA_DIR/utils
+#rm -rf hdf5* 2>/dev/null
+#wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${VERSION%.*}/hdf5-"$VERSION"/src/hdf5-"$VERSION".tar.bz2
+#tar xvf hdf5-"$VERSION".tar.bz2
+#cd hdf5-"$VERSION"
+#CCFLAGS=-D_Float128=__float128 FCFLAGS="-D_Float128=__float128" ./configure --enable-fortran --enable-fortran2003
+#make
+#make install
+#cd $MESA_DIR
+
+#
+#
+# and set in this makefile
+# LOAD_HDF5 = -L${MESA_DIR}/utils/hdf5/lib -lhdf5_fortran -lhdf5 -lz
+# INCLUDE_HDF5 = -I${MESA_DIR}/utils/hdf5/include
+#
+# And in your shell
+# export LD_LIBRARY_PATH=$MESA_DIR/utils/hdf5/lib:$LD_LIBRARY_PATH
+
+# These get the location from the AMUSE bindings configure
+LOAD_HDF5 = $(HDF5_LDFLAGS) -lhdf5_fortran -lhdf5 -lz -ldl
+INCLUDE_HDF5 = $(HDF5_FFLAGS)
+
+# If not YES then we don't use HDF5, thus you wont have access to custom weak rates
+# Also the rates test suite will not pass so do: /usr/bin/touch $MESA_DIR/rates/skip_test
+# if you change this option
+USE_HDF5 = YES
+
+
+# step 6) now do the mesa install
+USE_OPENMP = YES
+
+# step 7) Build shared libraries? Needed if you want mesa to be usable in python
 
 USE_SHARED = NO
 
+# do install at the top level mesa directory
 
-#################################################################
+# NOTE: do NOT run the install scripts at the subdirectory level
+# those are for use by the top level script
 
 # Unless you are adding a new compiler to the list of options,
 # you shouldn't need to change any of the following stuff.
 # It simply defines things for use by the module makefiles.
 
-SKIP_NAN_TRAPS = YES
-#SKIP_NAN_TRAPS = NO
-# if not SKIP_NAN_TRAPS, then also add $(FCtrapNANs) to FCbasic2
 
-FCbasic = -Wno-uninitialized -fno-range-check -fmax-errors=7 $(SPECIAL_FC_FLAGS) $(FCbasic2)
-FCbasic2 = -fprotect-parens -fno-sign-zero -fbacktrace -ggdb -finit-real=snan
+# ifneq (,$(findstring ifort,$(FC)))
 
-# Set the fortran standard to compile against, files that can't be compiled to the standard and are 
-# unfixable should add a statement like:  $(filter-out -std=f2008, $(COMPILE))
-# to filter out the option in their makefile
-FCstandard = -std=f2008 -Wno-error=tabs
+# #FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -ftz -traceback -error-limit 6
+# FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -traceback -error-limit 6
 
-# set environment variable GFORTRAN_ERROR_BACKTRACE=1
+# # use -vec-report2 to check on vectorization
+
+# FCimpno = -implicitnone 
+# FCchecks = -check uninit -check pointers -check bounds -check all
+# FCwarn = -warn all -warn nounused
+# FCwarn_unused = -warn unused
+# FC_fixed_preprocess = -fpp
+# FC_free_preprocess = -fpp
+# FCfixed = -fixed -132 $(FC_fixed_preprocess)
+# FCfixed72 = -fixed $(FC_fixed_preprocess)
+# FCfree = -free $(FC_free_preprocess)
+# FCopt = -O1
+# FCdebug = 
+# SLOW_COMPILE = 
+# OPENMP_FCFLAGS ?= -openmp
+# ifeq ($(USE_OPENMP),YES)
+# FCopenmp = -g $(OPENMP_FCFLAGS) -threads
+# else
+# FCopenmp = 
+# endif
+# FCstatic =
+
+# else
+# ifneq (,$(findstring gfortran,$(FC)))
+
+SKIP_NAN_TRAPS = YES
+
+FCbasic = -Wno-uninitialized -fno-range-check -fmax-errors=100 $(SPECIAL_FC_FLAGS) $(FCbasic2)
+FCbasic2 = -fprotect-parens -fno-sign-zero -fbacktrace -ggdb -finit-real=snan
 # -Warray-temporaries
+ 
+FCstandard = -std=f2008 -Wno-error=tabs
 
 FCimpno = -fimplicit-none  
-FCchecks = -fbounds-check -Wuninitialized -Warray-bounds
+FCchecks = -fbounds-check
 FCwarn = -Wunused-value -W -Wno-compare-reals -Wno-unused-parameter -Wno-function-elimination
 #FCwarn = -Wunused-value -Werror -W -Wno-compare-reals -Wno-unused-parameter
-FCtrapNANs = -ffpe-trap=invalid,overflow,zero 
-# -Wno-unused-parameter
- 
-# note: -Werror causes warnings to be treated as errors
-FC_fixed_preprocess = -x f77-cpp-input
-FC_free_preprocess = -x f95-cpp-input
+
 FCfixed = -ffixed-form -ffixed-line-length-none $(FC_fixed_preprocess)
 FCfixed72 = -ffixed-form $(FC_fixed_preprocess)
 FCfree = -ffree-form -ffree-line-length-none $(FC_free_preprocess)
 FCopt = -O${OPT_LEVEL} -ftree-vectorize
 FCdebug = -ggdb
 FCstatic =
+SLOW_COMPILE = -fno-var-tracking
+OPENMP_FCFLAGS ?= -fopenmp
 ifeq ($(USE_OPENMP),YES)
-FCopenmp = -fopenmp
+FCopenmp = $(OPENMP_FCFLAGS)
 else
 FCopenmp = 
 endif
 
+# else
+
+# FCbasic = UNKNOWN COMPILER
+# FCchecks =
+# FCwarn = 
+# FCfixed =
+# FCfree =
+# FCopt = 
+# FCdebug = 
+# FCopenmp = 
+# SLOW_COMPILE = 
+# endif
+# endif
+
 LIB_TOOL_STATIC = ar crs
 LIB_SUFFIX_STATIC = a
 
@@ -184,29 +295,22 @@
    LIB_SUFFIX = dylib
 endif
    LIB_TOOL = $(FC) $(LIB_FLAGS) $(FCopenmp) $(LD_FLAGS) -o
+
 else
    # Static library options
    LIB_TOOL = $(LIB_TOOL_STATIC)
    LIB_SUFFIX = $(LIB_SUFFIX_STATIC)
-   LIB_FLAGS = 
-   LIBS = 
-endif
-
-# Turn on all FPE options
-ifeq ($(MESA_FPE_CHECKS_ON),1) 
-   FCbasic += $(FCtrapNANs) -fbounds-check -Wuninitialized -Warray-bounds -fstack-protector-all -D_FORTIFY_SOURCE=2
-   FCopt = -O0 -ftree-vectorize 
-   SKIP_NAN_TRAPS = NO
+   LIB_FLAGS =
+   LIBS =
 endif
 
-
 # some definitions used in the module makefiles
 MODULE_DIR = ..
 MOD_PUBLIC_DIR = $(MODULE_DIR)/public
 MOD_PRIVATE_DIR = $(MODULE_DIR)/private
 MODULE_INCLUDES = -I$(MOD_PUBLIC_DIR) -I$(MOD_PRIVATE_DIR)
-OTHER_INCLUDES = -I$(MESA_DIR)/include
-INCLUDES = $(MODULE_INCLUDES) $(OTHER_INCLUDES)
+OTHER_INCLUDES = -I$(MESA_DIR)/include $(INCLUDE_HDF5)
+INCLUDES = $(MODULE_INCLUDES) $(OTHER_INCLUDES) 
 
 COMPILE_BASIC_FLAGS = $(FCbasic) $(FCopenmp) $(FCstatic) $(FCstandard) $(LIB_FLAGS) $(INCLUDES)
 COMPILE_BASIC = $(FC) $(COMPILE_BASIC_FLAGS)
@@ -291,19 +395,15 @@
 LOAD_MESA_BINARY_EXT = $(LOAD_MESA_STAR_EXT)
 LOAD_MESA_BINARY = $(LOAD_MESA_BINARY_INT) $(LOAD_MESA_BINARY_EXT)
 
-# Due to slow compile with -ggdb and -O2 we add -fno-var-tracking which speeds things up alot
-# At the expense of slightly worse debug information (but no worse than -ggdb -O0 would be, as that implies -fno-var-tracking)
-SLOW_COMPILE = -fno-var-tracking
-
 # LOADER creates executables
-LOADER = $(FC)
+LOADER = $(FC) $(LDFLAGS)
 
 STAR_WORK_OBJS = \
    run_star_extras.o run_star.o 
 
 BINARY_WORK_OBJS = \
-   run_star_extras.o run_binary_extras.o run_binary.o
-
+   $(STAR_WORK_OBJS) run_binary_extras.o run_binary.o
+   
 #Test if we are on windows
 BUILD_ON_WINDOWS=NO
 ifeq ($(OS),Windows_NT)
@@ -316,15 +416,12 @@
 # Path to cp_if_newer script
 CP_IF_NEWER = $(MESA_DIR)/utils/cp_if_newer
 
-# Path to check_sdk_version script
-CHECK_SDK_VERSION = $(MESA_DIR)/utils/check_sdk_version
-
 # makedepf90 invocation (depends on whether we have the SDK2-patched version that
 # supports the -X flag)
-ifneq ($(shell makedepf90 -V | grep sdk2),)
+ifneq ($(shell $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -V | grep sdk2),)
     MAKEDEPF90_IGNORE_MODS = intrinsic omp_lib iso_c_binding iso_fortran_env ieee_arithmetic crmath hdf5
-    MAKEDEPF90 = makedepf90 -m %m.mod -X $(addprefix -u,$(MAKEDEPF90_IGNORE_MODS))
+    MAKEDEPF90 := $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -m %m.mod -X $(addprefix -u,$(MAKEDEPF90_IGNORE_MODS))
 else
-    MAKEDEPF90 = makedepf90 -m %m.mod
+    MAKEDEPF90 := $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -m %m.mod
 endif
     
diff -u -r mesa-r15140/utils/makefile_header_non_mesasdk mesa-r15140.new/utils/makefile_header_non_mesasdk
--- mesa-r15140/utils/makefile_header_non_mesasdk	2020-11-05 11:06:59.000000000 +0100
+++ mesa-r15140.new/utils/makefile_header_non_mesasdk	2024-12-17 10:37:35.007376855 +0100
@@ -17,14 +17,25 @@
 # NOTE: recent versions of mesa have required reduced optimization 
 # in order to work with ifort; we suggest using gfortran instead of ifort if possible.
 
-CC = gcc
-FC = ifort
-#FC = gfortran
+CC = $(MPICC)
+FC =  $(MPIFC)
+
+# Set optimization level
+ARCH = $(shell uname -m)
+
+ifeq (${ARCH},x86_64)
+OPT_LEVEL = 2
+else ifeq (${ARCH},aarch64)
+OPT_LEVEL = 2
+SPECIAL_FC_FLAGS := ${SPECIAL_FC_FLAGS} -ffp-contract=off
+else
+OPT_LEVEL = 0
+endif
 
 
 # if you need special flags for the compiler, define them here:
-SPECIAL_FC_FLAGS = 
-SPECIAL_C_FLAGS = 
+SPECIAL_FC_FLAGS = $(CFLAGS)
+SPECIAL_C_FLAGS = $(FCFLAGSs)
 
 # step 1.a) [temporary workaround for loader problem on Mac:] 
 #           go down to select the correct entry for LOAD_MATRIX 
@@ -35,17 +46,18 @@
 USE_CRMATH = YES
 
 ifeq ($(USE_CRMATH),YES)
-LOAD_CRMATH = -lcrmath -lcrlibm
-INCLUDE_CRMATH = 
+LOAD_CRMATH = -L$(MESA_DIR)/lib -lcrmath -lcrlibm
+export MESASDK_MATH_SLOT = crmath
+INCLUDE_CRMATH = -I$(MESA_DIR)/include
 endif
 
 # step 3) specify which BLAS and LAPACK libraries to use for mesa/mtx
 
 # these are the standard defaults
-WHICH_LAPACK = USE_SRCS
-LOAD_LAPACK = -lmesalapack
-WHICH_BLAS = USE_SRCS
-LOAD_BLAS = -lmesablas
+WHICH_LAPACK = 
+LOAD_LAPACK = $(LAPACK_LIBS) -llapack95
+WHICH_BLAS = 
+LOAD_BLAS = $(BLAS_LIBS) $(LAPACK_LIBS) -llapack95
 MKL_INCLUDE = 
 
 # step 4) do you want to use PGPLOT with mesa/star?                                                                                     
@@ -93,7 +105,7 @@
 # NOTE: a change in USE_PGSTAR doesn't take effect until you next recompile mesa/star
 
 # for now, GYRE is only available with the mesasdk 
-USE_GYRE = NO
+USE_GYRE = YES
 
 # See http://www.gnu.org/software/make/manual/make.html#Testing-Flags for findstring
 ifneq (,$(findstring ifort,$(FC)))
@@ -110,8 +122,8 @@
 
 #USE_PGSTAR = NO
 #LOAD_PGPLOT = 
-USE_PGSTAR = YES
-LOAD_PGPLOT = -L/Users/bpaxton/mesa/utils/pgplot_gfortran -lpgplot -L/usr/X11R6/lib -lX11 -lpng
+USE_PGSTAR = NO
+LOAD_PGPLOT = 
 
 else
 
@@ -152,17 +164,16 @@
 # export LD_LIBRARY_PATH=$MESA_DIR/utils/hdf5/lib:$LD_LIBRARY_PATH
 
 # These are if you are using the sdk hdf5 implementation
-LOAD_HDF5 = `mesasdk_hdf5_link`
-INCLUDE_HDF5 = -I${MESASDK_ROOT}/include
+LOAD_HDF5 = -L${MESA_DIR}/lib -lhdf5_fortran -lhdf5 -lz -ldl
+INCLUDE_HDF5 = -I${MESA_DIR}/include
 
 # If not YES then we don't use HDF5, thus you wont have access to custom weak rates
 # Also the rates test suite will not pass so do: /usr/bin/touch $MESA_DIR/rates/skip_test
 # if you change this option
-USE_HDF5 = NO
+USE_HDF5 = YES
 
 
 # step 6) now do the mesa install
-
 USE_OPENMP = YES
 
 # step 7) Build shared libraries? Needed if you want mesa to be usable in python
@@ -179,72 +190,76 @@
 # It simply defines things for use by the module makefiles.
 
 
-ifneq (,$(findstring ifort,$(FC)))
+# ifneq (,$(findstring ifort,$(FC)))
 
-#FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -ftz -traceback -error-limit 6
-FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -traceback -error-limit 6
+# #FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -ftz -traceback -error-limit 6
+# FCbasic = $(SPECIAL_FC_FLAGS) -assume protect-parens -fp-model source -prec-div -prec-sqrt -traceback -error-limit 6
 
-# use -vec-report2 to check on vectorization
+# # use -vec-report2 to check on vectorization
 
-FCimpno = -implicitnone 
-FCchecks = -check uninit -check pointers -check bounds -check all
-FCwarn = -warn all -warn nounused
-FCwarn_unused = -warn unused
-FC_fixed_preprocess = -fpp
-FC_free_preprocess = -fpp
-FCfixed = -fixed -132 $(FC_fixed_preprocess)
-FCfixed72 = -fixed $(FC_fixed_preprocess)
-FCfree = -free $(FC_free_preprocess)
-FCopt = -O1
-FCdebug = -g
-SLOW_COMPILE = 
-ifeq ($(USE_OPENMP),YES)
-FCopenmp = -qopenmp -threads
-else
-FCopenmp = 
-endif
-FCstatic =
+# FCimpno = -implicitnone 
+# FCchecks = -check uninit -check pointers -check bounds -check all
+# FCwarn = -warn all -warn nounused
+# FCwarn_unused = -warn unused
+# FC_fixed_preprocess = -fpp
+# FC_free_preprocess = -fpp
+# FCfixed = -fixed -132 $(FC_fixed_preprocess)
+# FCfixed72 = -fixed $(FC_fixed_preprocess)
+# FCfree = -free $(FC_free_preprocess)
+# FCopt = -O1
+# FCdebug = 
+# SLOW_COMPILE = 
+# OPENMP_FCFLAGS ?= -openmp
+# ifeq ($(USE_OPENMP),YES)
+# FCopenmp = -g $(OPENMP_FCFLAGS) -threads
+# else
+# FCopenmp = 
+# endif
+# FCstatic =
 
-else
-ifneq (,$(findstring gfortran,$(FC)))
+# else
+# ifneq (,$(findstring gfortran,$(FC)))
+
+SKIP_NAN_TRAPS = YES
 
 FCbasic = -Wno-uninitialized -fno-range-check -fmax-errors=100 $(SPECIAL_FC_FLAGS) $(FCbasic2)
 FCbasic2 = -fprotect-parens -fno-sign-zero -fbacktrace -ggdb -finit-real=snan
 # -Warray-temporaries
  
+FCstandard = -std=f2008 -Wno-error=tabs
+
 FCimpno = -fimplicit-none  
 FCchecks = -fbounds-check
 FCwarn = -Wunused-value -W -Wno-compare-reals -Wno-unused-parameter -Wno-function-elimination
 #FCwarn = -Wunused-value -Werror -W -Wno-compare-reals -Wno-unused-parameter
  
-FC_fixed_preprocess = -x f77-cpp-input
-FC_free_preprocess = -x f95-cpp-input
-FCfixed = -ffixed-form -ffixed-line-length-132 $(FC_fixed_preprocess)
+FCfixed = -ffixed-form -ffixed-line-length-none
 FCfixed72 = -ffixed-form $(FC_fixed_preprocess)
-FCfree = -ffree-form -ffree-line-length-none $(FC_free_preprocess)
-FCopt = -O2 -ftree-vectorize
+FCfree = -ffree-form -ffree-line-length-none
+FCopt = -O${OPT_LEVEL} -ftree-vectorize
 FCdebug = -ggdb
 FCstatic =
 SLOW_COMPILE = -fno-var-tracking
+OPENMP_FCFLAGS ?= -fopenmp
 ifeq ($(USE_OPENMP),YES)
-FCopenmp = -fopenmp
+FCopenmp = $(OPENMP_FCFLAGS)
 else
 FCopenmp = 
 endif
 
-else
+# else
 
-FCbasic = UNKNOWN COMPILER
-FCchecks =
-FCwarn = 
-FCfixed =
-FCfree =
-FCopt = 
-FCdebug = 
-FCopenmp = 
-SLOW_COMPILE = 
-endif
-endif
+# FCbasic = UNKNOWN COMPILER
+# FCchecks =
+# FCwarn = 
+# FCfixed =
+# FCfree =
+# FCopt = 
+# FCdebug = 
+# FCopenmp = 
+# SLOW_COMPILE = 
+# endif
+# endif
 
 LIB_TOOL_STATIC = ar crs
 LIB_SUFFIX_STATIC = a
@@ -280,41 +295,15 @@
    LIBS =
 endif
 
-
 # some definitions used in the module makefiles
 MODULE_DIR = ..
 MOD_PUBLIC_DIR = $(MODULE_DIR)/public
 MOD_PRIVATE_DIR = $(MODULE_DIR)/private
 MODULE_INCLUDES = -I$(MOD_PUBLIC_DIR) -I$(MOD_PRIVATE_DIR)
-OTHER_INCLUDES = -I$(MESA_DIR)/include
-INCLUDES = $(MODULE_INCLUDES) $(OTHER_INCLUDES)
-
-COMPILE_BASIC_FLAGS = $(FCbasic) $(FCopenmp) $(FCstatic) $(INCLUDES)
-COMPILE_BASIC = $(FC) $(COMPILE_BASIC_FLAGS)
-
-COMPILE_TO_TEST   = $(COMPILE_BASIC) $(FCwarn) $(FCimpno) $(FCchecks) $(FCopt) $(FCdebug) -c
-COMPILE_TO_DEPLOY = $(COMPILE_BASIC) $(FCwarn) $(FCimpno) $(FCopt) -c
-
-COMPILE_NO_OPENMP_NO_OPT = \
-   $(FC) $(FCbasic) $(INCLUDES) $(FCwarn) $(FCimpno) $(FCchecks) $(FCdebug) -c -O
-COMPILE_ASAP = \
-   $(FC) $(FCbasic) $(INCLUDES) $(FCwarn) $(FCimpno) $(FCdebug) -c -O
-
-COMPILE_FAST = $(COMPILE_BASIC) -c
-COMPILE_NO_CHECKS = $(COMPILE_BASIC) $(FCopt) -c
-COMPILE_NO_OPT    = $(COMPILE_BASIC) $(FCwarn) $(FCimpno) $(FCchecks) $(FCdebug) -c -O
-COMPILE_DEVEL     = $(COMPILE_NO_OPT)
-
-
-# some definitions used in the module makefiles
-MODULE_DIR = ..
-MOD_PUBLIC_DIR = $(MODULE_DIR)/public
-MOD_PRIVATE_DIR = $(MODULE_DIR)/private
-MODULE_INCLUDES = -I$(MOD_PUBLIC_DIR) -I$(MOD_PRIVATE_DIR)
-OTHER_INCLUDES = -I$(MESA_DIR)/include $(INCLUDE_HDF5) $(INCLUDE_CRMATH)
+OTHER_INCLUDES = -I$(MESA_DIR)/include $(INCLUDE_HDF5)
 INCLUDES = $(MODULE_INCLUDES) $(OTHER_INCLUDES) 
 
-COMPILE_BASIC_FLAGS = $(FCbasic) $(FCopenmp) $(FCstatic) $(LIB_FLAGS) $(INCLUDES) $(LIB_FLAGS)
+COMPILE_BASIC_FLAGS = $(FCbasic) $(FCopenmp) $(FCstatic) $(FCstandard) $(LIB_FLAGS) $(INCLUDES)
 COMPILE_BASIC = $(FC) $(COMPILE_BASIC_FLAGS)
 
 COMPILE_TO_TEST   = $(COMPILE_BASIC) $(FCwarn) $(FCimpno) $(FCchecks) $(FCopt) $(FCdebug) -c
@@ -330,22 +319,22 @@
 COMPILE_NO_OPT    = $(COMPILE_BASIC) $(FCwarn) $(FCimpno) $(FCchecks) $(FCdebug) -c -O
 COMPILE_DEVEL     = $(COMPILE_NO_OPT)
 
+
 # some definitions used in the test makefiles and client makefiles
 
 WORK_COMPILE = \
-   $(FC) $(FCbasic) $(FCopenmp) -O0 $(FCchecks) $(FCdebug) $(FCfree) \
-   $(FC_free_preprocess) -I$(MESA_INCLUDE_DIR) $(INCLUDE_HDF5) -c
- 
+   $(FC) $(FCbasic) $(FCopenmp) $(FCchecks) $(FCdebug) $(FCfree) \
+   -I$(MESA_INCLUDE_DIR) -I$(WORK_SRC_DIR) -c
+
 ifeq ($(USE_PGPLOT),YES)
 	WORK_COMPILE += -DUSE_PGPLOT
 endif
- 
+
 TEST_DIR = ..
 TEST_SRC_DIR = $(TEST_DIR)/src
 PACKAGE_DIR = ../..
 LOCAL_LIB_DIR = $(PACKAGE_DIR)/make
 MESA_LIB_DIR = $(MESA_DIR)/lib
-
 MESA_INCLUDE_DIR = $(MESA_DIR)/include
 TEST_INCLUDES = -I$(LOCAL_LIB_DIR) -I$(PACKAGE_DIR)/public -I$(MESA_INCLUDE_DIR)
 TEST_COMPILE_FLAGS = $(FCbasic) $(FCopenmp) $(TEST_INCLUDES) $(FCchecks) $(FCdebug) $(LIB_FLAGS) -c
@@ -355,7 +344,7 @@
 
 LIBS_MATRIX = mtx const math utils
 LOAD_MATRIX_INT = $(addprefix -l,$(LIBS_MATRIX))
-LOAD_MATRIX_EXT = $(LOAD_CRMATH) $(LOAD_LAPACK) $(LOAD_BLAS)
+LOAD_MATRIX_EXT = $(LOAD_CRMATH) $(LOAD_LAPACK95) $(LOAD_LAPACK) $(LOAD_BLAS)
 LOAD_MATRIX = $(LOAD_MATRIX_INT) $(LOAD_MATRIX_EXT)
 
 LIBS_MESA_NUMERICS = interp_2d interp_1d num auto_diff $(LIBS_MATRIX)
@@ -388,7 +377,7 @@
 ifeq ($(USE_PGSTAR),YES)
    LOAD_MESA_STAR_EXT = $(LOAD_STAR_MODS_EXT) $(LOAD_PGPLOT)
 else
-   LOAD_MESA_STAR_EXT = $(LOAD_STAR_MODS_EXT) $(LOAD_PGPLOT)
+   LOAD_MESA_STAR_EXT = $(LOAD_STAR_MODS_EXT) 
 endif
 LOAD_MESA_STAR = $(LOAD_MESA_STAR_INT) $(LOAD_MESA_STAR_EXT)
 
@@ -398,7 +387,7 @@
 LOAD_MESA_BINARY = $(LOAD_MESA_BINARY_INT) $(LOAD_MESA_BINARY_EXT)
 
 # LOADER creates executables
-LOADER = $(FC)
+LOADER = $(FC) $(LDFLAGS)
 
 STAR_WORK_OBJS = \
    run_star_extras.o run_star.o 
@@ -420,10 +409,10 @@
 
 # makedepf90 invocation (depends on whether we have the SDK2-patched version that
 # supports the -X flag)
-ifneq ($(shell makedepf90 -V | grep sdk2),)
-    MAKEDEPF90_IGNORE_MODS = intrinsic omp_lib iso_c_binding iso_fortran_env crmath hdf5
-    MAKEDEPF90 = makedepf90 -m %m.mod -X $(addprefix -u,$(MAKEDEPF90_IGNORE_MODS))
+ifneq ($(shell $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -V | grep sdk2),)
+    MAKEDEPF90_IGNORE_MODS = intrinsic omp_lib iso_c_binding iso_fortran_env ieee_arithmetic crmath hdf5
+    MAKEDEPF90 := $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -m %m.mod -X $(addprefix -u,$(MAKEDEPF90_IGNORE_MODS))
 else
-    MAKEDEPF90 = makedepf90 -m %m.mod
+    MAKEDEPF90 := $(MESA_DIR)/utils/makedepf90-2.8.8/makedepf90 -m %m.mod
 endif
     

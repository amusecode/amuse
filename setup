#!/bin/sh

# This script is written in POSIX-compliant shell, and should run with any shell
# supporting this, including dash (/bin/sh on Ubuntu), bash (/bin/sh on many other
# systems) and bash 3.2 (/bin/sh on macOS). Zsh should also work in POSIX mode, so if
# macOS ever changes its /bin/sh then we should still be good.

# This is written in an old-fashioned style with procedures and global variables,
# because that's all we can do in a shell. Please don't write shell scripts this long if
# you can avoid it, and please don't use global variables like this in any other
# language.


# When installing the framework into a conda environment, we install these conda
# versions of its dependencies to minimise the number of pip-installed packages.
# These must be single-quoted as shown, or the code below will get confused.
#
FRAMEWORK_CONDA_DEPS="'docutils>=0.6' 'mpi4py>=1.1.0' 'numpy>=1.2.2' 'h5py>=1.1.0'"


# Disabled tests
#
# Some of the tests are currently broken, and we need to figure out what to do with them
# and/or who needs to fix them how. Meanwhile, we want to have a set of passing tests
# for our new CI, because we don't want to normalise failure. So we disable the broken
# tests for now, but print a note whenever the tests are run. See issue #1103.
#
BAD_EXT_TESTS="test_jobserver TestLimepy TestRotatingBridge::test1"
BAD_EXT_TESTS="${BAD_EXT_TESTS} TestHeatingWind::test_supernova"
BAD_EXT_TESTS="${BAD_EXT_TESTS} TestHeatingWind::test_supernova_manual"
BAD_EXT_TESTS="${BAD_EXT_TESTS} TestsForIssue123"


# Extra pytest options for debugging
PYTEST_OPTS=''
# PYTEST_OPTS='-s -vvv --log-cli-level=debug'


. support/setup/util.sh
. support/setup/log.sh
. support/setup/format.sh
. support/setup/help.sh
. support/setup/environment.sh
. support/setup/installing.sh
. support/setup/testing.sh


# Show the current configuration
#
# This uses the following variables:
#
# FEATURES - from support/configuration.sh
#
configure() {
    en_pack_text="$(printf '%b' "${ENABLED_PACKAGES_TEXT}" | pr -3 -t -w 90)"

    printf '\n'
    printf '%b\n' "${COLOR_CYAN}*** Configuration complete ***${COLOR_END}"
    printf 'Detected features:%s\n' "${FEATURES}"
    printf '\n'
    printf '%b\n' "${COLOR_GREEN}** Enabled packages **${COLOR_END}"
    printf '\n%b\n' "Packages marked i) are currently installed."
    printf '\n%b' "${en_pack_text}"
    printf '\n\n'
    printf '%b\n' "${COLOR_RED}** Disabled packages **${COLOR_END}"
    printf '\n%b' "${DISABLED_PACKAGES_TEXT}"
    printf '%b' "${BROKEN_PACKAGES_TEXT}"
    printf '\n'
    printf '%s\n' "For broken packages, you can find the listed issue at https://github.com/amusecode/amuse/issues"
    printf '\n'

    printf '%b\n\n' "${COLOR_CYAN}*** Next steps ***${COLOR_END}"

    can_install="yes"
    if [ "a${ENV_TYPE}" = "a" ] ; then
        print_environment_step
        can_install="no"
    elif [ "a${HAVE_PIP}" = "a" ] || [ "a${HAVE_WHEEL}" = "a" ] ; then
        print_pip_wheel_step
        can_install="no"
    elif [ "a${DISABLED_PACKAGES}" != "a" ] ; then
        print_enable_packages_step
    fi

    if [ "a${ENABLED_PACKAGES}" = "a" ] ; then
        can_install="no"
    fi

    if [ "${can_install}" = "yes" ] ; then
        print_install_amuse_step
    fi
}


# Install command
#
# This checks what we're supposed to install and dispatches accordingly.
#
install() {
    target="$1"

    check_install "${target}"

    case ${target} in
        all )
            install_all
            ;;
        amuse-framework | framework )
            target="$(normalise_package_name ${target})"
            install_framework
            ;;
        sapporo_light )
            install_sapporo_light
            ;;
        * )
            target="$(normalise_package_name ${target})"
            install_package install "${target}"
            ;;
    esac
}


# Develop command
#
# Does a develop install of something.
#
# This checks what we're supposed to develop-install and dispatches accordingly.
#
develop() {
    target="$1"

    check_install "${target}"

    case ${target} in
        amuse-framework | framework )
            develop_framework
            ;;
        * )
            target="$(normalise_package_name ${target})"
            install_package develop "${target}"
            ;;
    esac
}


# Package command
#
# Does a package building install of something.
#
# This checks what we're supposed to package-install and dispatches accordingly.
#
package() {
    target="$1"

    case ${target} in
        amuse-framework | framework )
            package_framework
            ;;
        * )
            forward_to_package package "${target}"
            ;;
    esac
}


# Test command
#
# Runs tests for a package or for the framework. The tests are run against the installed
# package, so that they also test the installation procedure.
#
run_test() {
    target="$1"

    ensure_pytest

    case ${target} in
        all )
            test_all
            ;;
        amuse-framework | framework )
            check_package_installed_for_test amuse-framework
            test_framework
            ;;
        amuse-ext | ext )
            check_package_installed_for_test amuse-framework
            test_amuse_ext
            ;;
        * )
            target="$(normalise_package_name ${target})"
            check_package_installed_for_test "${target}"
            forward_to_package "test" "${target}"
            ;;
    esac
}


# Clean command
#
# Calls make clean on the entire codebase.
#
clean() {
    make -C support clean
    make -C lib clean
    make -C lib clean-sapporo_light
    make -C src/amuse/community clean
    make -C src/tests clean
}


# Distclean command
#
# Calls make distclean on the entire codebase.
#
distclean() {
    make -C support distclean
    make -C lib distclean
    make -C lib distclean-sapporo_light
    make -C src/amuse/community distclean
    make -C src/tests distclean
}


### Main script ###

CMD="$1"
TARGET="$2"

case ${CMD} in
    clean )
        clean "$TARGET"
        exit 0
        ;;
    distclean )
        distclean "$TARGET"
        exit 0
        ;;
    help )
        print_help
        exit 0
        ;;
    "" )
        CMD="configure"
        ;;
esac

printf '%s\n' 'Checking for dependencies, one moment please...'

if ! (cd support && ./configure >config.out 2>&1) ; then
    printf '%s\n\n' 'An error occurred running configure. This should not happen.'
    printf '%s\n' 'Please create an issue at http://github.com/amusecode/amuse/issues'
    printf '%s\n' 'and attach the support/config.log file to it, or ask for help on'
    printf '%s\n' 'the AMUSE Slack.'
    exit 1
fi

. support/configuration.sh

analyse_environment

case ${CMD} in
    configure | "" )
        configure
        ;;
    install )
        install "${TARGET}"
        ;;
    test )
        run_test "${TARGET}"
        ;;
    develop )
        develop "${TARGET}"
        ;;
    package )
        package "${TARGET}"
        ;;
    * )
        print_help "${CMD}"
        ;;
esac

